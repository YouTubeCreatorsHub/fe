name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      repository-projects: write
      contents: read
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            async function fetchProjectDetails() {
              const query = `
                query($org: String!, $projectNumber: Int!) {
                  organization(login: $org) {
                    projectV2(number: $projectNumber) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const variables = {
                org: "YouTubeCreatorsHub",
                projectNumber: 1,
              };

              const result = await github.graphql(query, variables);
              const project = result.organization.projectV2;
              const statusField = project.fields.nodes.find(field => field.name === 'Status');

              if (!statusField) {
                throw new Error('Status 필드를 찾을 수 없습니다.');
              }

              const columns = {
                BACKLOG: statusField.options.find(opt => opt.name === '📋 Backlog')?.id,
                SPRINT_BACKLOG: statusField.options.find(opt => opt.name === '📅 Sprint Backlog')?.id,
                IN_PROGRESS: statusField.options.find(opt => opt.name === '💻 In Progress')?.id,
                IN_REVIEW: statusField.options.find(opt => opt.name === '👀 In Review')?.id,
                DONE: statusField.options.find(opt => opt.name === '✅ Done')?.id
              };

              return {
                projectId: project.id,
                statusFieldId: statusField.id,
                columns
              };
            }

            let PROJECT;

            async function initProjectDetails() {
              if (!PROJECT) {
                PROJECT = await fetchProjectDetails();
              }
            }

            async function moveIssueToColumn(contentId, columnId) {
              await initProjectDetails();
              const { projectId, statusFieldId } = PROJECT;

              try {
                const addMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId,
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;

                const { addProjectV2ItemById } = await github.graphql(addMutation, {
                  projectId,
                  contentId
                });

                const itemId = addProjectV2ItemById?.item?.id;

                if (itemId) {
                  const updateMutation = `
                    mutation(
                      $projectId: ID!
                      $itemId: ID!
                      $fieldId: ID!
                      $optionId: String!
                    ) {
                      updateProjectV2ItemFieldValue(
                        input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: { 
                            singleSelectOptionId: $optionId
                          }
                        }
                      ) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;

                  await github.graphql(updateMutation, {
                    projectId,
                    itemId,
                    fieldId: statusFieldId,
                    optionId: columnId
                  });
                }
              } catch (error) {
                console.error('Error:', error);
              }
            }

            async function processEvent() {
              if (context.eventName === 'issues') {
                const issueId = context.payload.issue.node_id;
                const repo = context.payload.repository.name.toLowerCase();
                
                if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                  if (repo === 'fe') {
                    await moveIssueToColumn(issueId, PROJECT.columns.BACKLOG);
                  } else if (repo === 'be') {
                    await moveIssueToColumn(issueId, PROJECT.columns.SPRINT_BACKLOG);
                  }
                } else if (context.payload.action === 'closed') {
                  await moveIssueToColumn(issueId, PROJECT.columns.DONE);
                }
              }

              if (context.eventName === 'pull_request') {
                const prId = context.payload.pull_request.node_id;
                
                if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                  await moveIssueToColumn(prId, PROJECT.columns.IN_REVIEW);
                } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                  await moveIssueToColumn(prId, PROJECT.columns.DONE);
                }
              }
            }

            await processEvent();

  add_reviewers:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: ['choco5958', 'lim3873', 'tlswltjq']
              });
            } catch (error) {
              console.error('Error adding reviewers:', error);
            }

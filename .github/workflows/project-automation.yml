name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      organization-projects: write
      repository-projects: write
      contents: read
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            const PROJECT = {
              ID: '',
              COLUMNS: {}
            };

            async function fetchProjectDetails() {
              const query = `
                query($org: String!, $projectNumber: Int!) {
                  organization(login: $org) {
                    projectV2(number: $projectNumber) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const variables = { org: "YouTubeCreatorsHub", projectNumber: 1 };

              try {
                console.log('Fetching project details...');
                const result = await github.graphql(query, variables);
                console.log('GraphQL Result:', JSON.stringify(result));

                const project = result.organization?.projectV2;
                if (!project) throw new Error('Project not found.');

                const statusField = project.fields.nodes.find(field => 
                  field.name === 'Status' && field.options
                );
                if (!statusField) throw new Error('Status field not found.');

                const columns = {
                  BACKLOG: statusField.options.find(opt => opt.name === 'Backlog')?.id,
                  SPRINT_BACKLOG: statusField.options.find(opt => opt.name === 'Sprint Backlog')?.id,
                  IN_PROGRESS: statusField.options.find(opt => opt.name === 'In Progress')?.id,
                  IN_REVIEW: statusField.options.find(opt => opt.name === 'In Review')?.id,
                  DONE: statusField.options.find(opt => opt.name === 'Done')?.id
                };

                return { projectId: project.id, statusFieldId: statusField.id, columns };
              } catch (error) {
                console.error('Error fetching project details:', error.message);
                throw error;
              }
            }

            async function initializeProject() {
              if (!PROJECT.ID) {
                try {
                  const projectDetails = await fetchProjectDetails();
                  PROJECT.ID = projectDetails.projectId;
                  Object.assign(PROJECT.COLUMNS, projectDetails.columns);
                  console.log('Initialized PROJECT:', PROJECT);
                } catch (error) {
                  console.error('Error initializing project:', error.message);
                  throw error;
                }
              }
            }

            async function moveIssueToColumn(contentId, columnId) {
              if (!PROJECT.ID || !columnId) await initializeProject();

              try {
                const addMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                      item { id }
                    }
                  }
                `;
                const addResult = await github.graphql(addMutation, { projectId: PROJECT.ID, contentId });
                const itemId = addResult.addProjectV2ItemById?.item?.id;

                if (!itemId) throw new Error('Failed to add item to project.');

                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }
                    ) { projectV2Item { id } }
                  }
                `;
                await github.graphql(updateMutation, { 
                  projectId: PROJECT.ID,
                  itemId,
                  fieldId: PROJECT.COLUMNS.STATUS_FIELD_ID,
                  optionId: columnId 
                });
              } catch (error) {
                console.error('Error moving item to column:', error.message);
              }
            }

            async function processEvent() {
              await initializeProject();

              if (context.eventName === 'issues') {
                const issueNodeID = context.payload.issue.node_id;
                if (context.payload.action === 'opened' || context.payload.action === 'reopened') 
                  await moveIssueToColumn(issueNodeID, PROJECT.COLUMNS.BACKLOG);
                else if (context.payload.action === 'closed')
                  await moveIssueToColumn(issueNodeID, PROJECT.COLUMNS.DONE);
              }

              if (context.eventName === 'pull_request') {
                const prNodeID = context.payload.pull_request.node_id;
                if (context.payload.action === 'opened' || context.payload.action === 'reopened')
                  await moveIssueToColumn(prNodeID, PROJECT.COLUMNS.IN_REVIEW);
                else if (context.payload.action === 'closed' && context.payload.pull_request.merged)
                  await moveIssueToColumn(prNodeID, PROJECT.COLUMNS.DONE);
              }
            }

            await processEvent();

name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            const PROJECT = {
              ID: 'PVT_kwDOC0FCP84AsibV',
              STATUS_FIELD: 'PVTSSF_lADOC0FCP84AsibVzgjchQE',
              COLUMNS: {
                BACKLOG: '17052d30',
                SPRINT_BACKLOG: '2b4b3335',
                IN_PROGRESS: 'dc54b4f8',
                IN_REVIEW: '3fdc4773',
                DONE: '98236657'
              }
            };

            async function addToProject(contentId) {
              try {
                const mutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                const response = await github.graphql(mutation, {
                  projectId: PROJECT.ID,
                  contentId: contentId
                });
                
                return response.addProjectV2ItemById.item.id;
              } catch (error) {
                if (error.message.includes('already exists')) {
                  const query = `
                    query($projectId: ID!, $contentId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          items(first: 1, filter: {contentId: $contentId}) {
                            nodes {
                              id
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const result = await github.graphql(query, {
                    projectId: PROJECT.ID,
                    contentId: contentId
                  });
                  
                  return result.node.items.nodes[0].id;
                }
                throw error;
              }
            }

            async function updateStatus(itemId, columnId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $columnId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $columnId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: PROJECT.ID,
                itemId: itemId,
                fieldId: PROJECT.STATUS_FIELD,
                columnId: columnId
              });
            }

            async function moveIssueToColumn(contentId, columnId) {
              try {
                console.log('Processing:', { contentId, columnId });
                const itemId = await addToProject(contentId);
                console.log('Item ID:', itemId);
                await updateStatus(itemId, columnId);
                console.log('Status updated successfully');
              } catch (error) {
                console.error('Error:', error.message);
                throw error;
              }
            }

            if (context.eventName === 'issues') {
              const issueId = context.payload.issue.node_id;
              const repo = context.payload.repository.name.toLowerCase();
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                if (repo === 'fe') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.BACKLOG);
                } else if (repo === 'be') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.SPRINT_BACKLOG);
                }
              } else if (context.payload.action === 'closed') {
                await moveIssueToColumn(issueId, PROJECT.COLUMNS.DONE);
              }
            }

            if (context.eventName === 'pull_request') {
              const prId = context.payload.pull_request.node_id;
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.IN_REVIEW);
              } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.DONE);
              }
            }

  add_reviewers:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: ['choco5958', 'lim3873', 'tlswltjq']
              });
              console.log('Reviewers added successfully');
            } catch (error) {
              console.error('Error adding reviewers:', error);
            }

name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true
    permissions:
      issues: write
      pull-requests: write
      organization-projects: write
      repository-projects: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            // 먼저 프로젝트 ID를 조회
            const projectQuery = `
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    field(name: "Status") {
                      ... on ProjectV2SingleSelectField {
                        id
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;

            try {
              // 프로젝트 정보 가져오기
              const projectResult = await github.graphql(projectQuery, {
                org: "YouTubeCreatorsHub",
                number: 1  // 프로젝트 번호
              });

              if (!projectResult.organization?.projectV2) {
                throw new Error('Project not found');
              }

              const projectId = projectResult.organization.projectV2.id;
              const statusField = projectResult.organization.projectV2.field;

              // 아이템 추가
              const addMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;

              let contentId;
              let statusOptionId;

              // 이벤트 타입에 따라 처리
              if (context.eventName === 'issues') {
                contentId = context.payload.issue.node_id;
                statusOptionId = context.payload.action === 'closed' 
                  ? statusField.options.find(o => o.name === 'Done').id
                  : statusField.options.find(o => o.name === 'Backlog').id;
              } else if (context.eventName === 'pull_request') {
                contentId = context.payload.pull_request.node_id;
                statusOptionId = context.payload.action === 'closed' 
                  ? statusField.options.find(o => o.name === 'Done').id
                  : statusField.options.find(o => o.name === 'In Review').id;
              }

              // 프로젝트에 아이템 추가
              const addResult = await github.graphql(addMutation, {
                projectId,
                contentId
              });

              // 상태 업데이트
              if (addResult.addProjectV2ItemById?.item?.id) {
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation, {
                  projectId,
                  itemId: addResult.addProjectV2ItemById.item.id,
                  fieldId: statusField.id,
                  optionId: statusOptionId
                });
              }

            } catch (error) {
              console.error('Error:', error.message);
              throw error;
            }

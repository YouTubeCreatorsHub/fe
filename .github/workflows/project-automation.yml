name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            // 프로젝트 정보 조회
            const projectQuery = `
              query {
                organization(login: "YouTubeCreatorsHub") {
                  projectV2(number: 1) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const projectInfo = await github.graphql(projectQuery);
            const PROJECT = {
              ID: projectInfo.organization.projectV2.id,
              STATUS_FIELD: projectInfo.organization.projectV2.fields.nodes.find(
                field => field.name === 'Status'
              ).id,
              COLUMNS: {
                BACKLOG: '17052d30',
                SPRINT_BACKLOG: '2b4b3335',
                IN_PROGRESS: 'dc54b4f8',
                IN_REVIEW: '3fdc4773',
                DONE: '98236657'
              }
            };

            async function moveIssueToColumn(nodeId, columnId) {
              try {
                const addToProjectMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;

                const addResponse = await github.graphql(addToProjectMutation, {
                  projectId: PROJECT.ID,
                  contentId: nodeId
                });

                if (addResponse.addProjectV2ItemById.item) {
                  const updateStatusMutation = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { 
                          singleSelectOptionId: $optionId
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;

                  await github.graphql(updateStatusMutation, {
                    projectId: PROJECT.ID,
                    itemId: addResponse.addProjectV2ItemById.item.id,
                    fieldId: PROJECT.STATUS_FIELD,
                    optionId: columnId
                  });
                }
              } catch (error) {
                console.error('Error in moveIssueToColumn:', error);
                throw error;
              }
            }

            // 이슈 자동화
            if (context.eventName === 'issues') {
              try {
                const repo = context.payload.repository.name.toLowerCase();
                if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                  if (repo === 'fe') {
                    await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.BACKLOG);
                  } else if (repo === 'be') {
                    await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.SPRINT_BACKLOG);
                  }
                } else if (context.payload.action === 'closed') {
                  await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.DONE);
                }
              } catch (error) {
                console.error('Error handling issue:', error);
                throw error;
              }
            }

            // PR 자동화
            if (context.eventName === 'pull_request') {
              try {
                if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                  await moveIssueToColumn(context.payload.pull_request.node_id, PROJECT.COLUMNS.IN_REVIEW);
                } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                  await moveIssueToColumn(context.payload.pull_request.node_id, PROJECT.COLUMNS.DONE);
                }
              } catch (error) {
                console.error('Error handling pull request:', error);
                throw error;
              }
            }

  add_reviewers:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: ['choco5958', 'lim3873', 'tlswltjq']
              });
            } catch (error) {
              console.error('Error adding reviewers:', error);
              throw error;
            }

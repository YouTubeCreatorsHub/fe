name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  project_automation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const PROJECT = {
              ID: 'PVT_kwDOC0FCP84AsibV',
              STATUS_FIELD: 'PVTSSF_lADOC0FCP84AsibVzgjchQE',
              COLUMNS: {
                BACKLOG: '17052d30',        // üìã Backlog
                SPRINT_BACKLOG: '2b4b3335', // üìÖ Sprint Backlog
                IN_PROGRESS: 'dc54b4f8',    // üíª In Progress
                IN_REVIEW: '3fdc4773',      // üëÄ In Review
                DONE: '98236657'            // ‚úÖ Done
              }
            };

            async function moveIssueToColumn(nodeId, columnId) {
              if (!nodeId) {
                console.error('Error: nodeId is empty');
                return;
              }

              try {
                console.log('Adding item with nodeId:', nodeId);
                console.log('Project ID:', PROJECT.ID);
                
                const addToProjectMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;

                const addResponse = await github.graphql(addToProjectMutation, {
                  projectId: PROJECT.ID,
                  contentId: nodeId
                });

                if (!addResponse?.addProjectV2ItemById?.item?.id) {
                  throw new Error('Failed to add item to project');
                }

                const itemId = addResponse.addProjectV2ItemById.item.id;
                console.log('Item added successfully, itemId:', itemId);

                const updateStatusMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $columnId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $statusFieldId
                      value: { 
                        singleSelectOptionId: $columnId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateStatusMutation, {
                  projectId: PROJECT.ID,
                  itemId: itemId,
                  statusFieldId: PROJECT.STATUS_FIELD,
                  columnId: columnId
                });

                console.log('Status updated successfully');
              } catch (error) {
                console.error('Error details:', error.message);
                if (error.request) console.error('Request:', error.request);
                if (error.response) console.error('Response:', error.response);
                throw error;
              }
            }

            // Ïù¥Ïäà ÏûêÎèôÌôî
            if (context.eventName === 'issues') {
              console.log('Processing issue event');
              const issueId = context.payload.issue?.node_id;
              if (!issueId) {
                console.error('No issue node_id found in payload');
                return;
              }
              
              const repo = context.payload.repository.name.toLowerCase();
              console.log('Repository:', repo);
              console.log('Action:', context.payload.action);
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                if (repo === 'fe') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.BACKLOG);
                } else if (repo === 'be') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.SPRINT_BACKLOG);
                }
              } else if (context.payload.action === 'closed') {
                await moveIssueToColumn(issueId, PROJECT.COLUMNS.DONE);
              }
            }

            // PR ÏûêÎèôÌôî
            if (context.eventName === 'pull_request') {
              console.log('Processing pull request event');
              const prId = context.payload.pull_request?.node_id;
              if (!prId) {
                console.error('No PR node_id found in payload');
                return;
              }
              
              console.log('Action:', context.payload.action);
              console.log('Merged:', context.payload.pull_request.merged);
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.IN_REVIEW);
              } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.DONE);
              }
            }

  add_reviewers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: ['choco5958', 'lim3873', 'tlswltjq']
              });
              console.log('Reviewers added successfully');
            } catch (error) {
              console.error('Error adding reviewers:', error);
              throw error;
            }

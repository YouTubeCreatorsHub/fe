name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            const PROJECT = {
              ID: 'PVT_kwDOC0FCP84AsibV',
              STATUS_FIELD: 'PVTSSF_lADOC0FCP84AsibVzgjchQE',
              COLUMNS: {
                BACKLOG: '17052d30',
                SPRINT_BACKLOG: '2b4b3335',
                IN_PROGRESS: 'dc54b4f8',
                IN_REVIEW: '3fdc4773',
                DONE: '98236657'
              }
            };

            async function moveIssueToColumn(itemId, columnId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $columnId: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { 
                        singleSelectOptionId: $columnId
                      }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: PROJECT.ID,
                itemId: itemId,
                fieldId: PROJECT.STATUS_FIELD,
                columnId: columnId
              });
            }

            if (context.eventName === 'issues') {
              const repo = context.payload.repository.name.toLowerCase();
              
              if (context.payload.action === 'opened') {
                if (repo === 'fe') {
                  await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.BACKLOG);
                }
                else if (repo === 'be') {
                  await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.SPRINT_BACKLOG);
                }
              }
              else if (context.payload.action === 'closed') {
                await moveIssueToColumn(context.payload.issue.node_id, PROJECT.COLUMNS.DONE);
              }
            }

            if (context.eventName === 'pull_request') {
              if (context.payload.action === 'opened') {
                await moveIssueToColumn(context.payload.pull_request.node_id, PROJECT.COLUMNS.IN_REVIEW);
              }
              else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                await moveIssueToColumn(context.payload.pull_request.node_id, PROJECT.COLUMNS.DONE);
              }
            }

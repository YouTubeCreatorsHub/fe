name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            const projectQuery = `
              query {
                organization(login: "YouTubeCreatorsHub") {
                  projectV2(number: 1) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const projectData = await github.graphql(projectQuery);
            console.log('Project Data:', JSON.stringify(projectData, null, 2));
            
            // 모든 필드 정보 출력
            const fields = projectData.organization.projectV2.fields.nodes;
            console.log('All Fields:', fields);
            
            const statusField = fields.find(field => field.name === 'Status');
            console.log('Status Field:', statusField);
            
            if (!statusField) {
              throw new Error('Status field not found in project');
            }
            
            const PROJECT = {
              ID: projectData.organization.projectV2.id,
              STATUS_FIELD: statusField.id,
              COLUMNS: {
                BACKLOG: '17052d30',
                SPRINT_BACKLOG: '2b4b3335',
                IN_PROGRESS: 'dc54b4f8',
                IN_REVIEW: '3fdc4773',
                DONE: '98236657'
              }
            };

            console.log('Project Configuration:', PROJECT);

            async function addToProject(contentId) {
              const mutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const result = await github.graphql(mutation, {
                projectId: PROJECT.ID,
                contentId: contentId
              });
              return result.addProjectV2ItemById.item.id;
            }

            async function updateStatus(itemId, columnId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: PROJECT.ID,
                itemId: itemId,
                fieldId: PROJECT.STATUS_FIELD,
                optionId: columnId
              });
            }

            async function moveIssueToColumn(contentId, columnId) {
              try {
                console.log('Moving item:', { contentId, columnId });
                const itemId = await addToProject(contentId);
                console.log('Added to project, item ID:', itemId);
                await updateStatus(itemId, columnId);
                console.log('Status updated successfully');
              } catch (error) {
                console.error('Error in moveIssueToColumn:', error);
                throw error;
              }
            }

            // 이슈 처리
            if (context.eventName === 'issues') {
              const issueId = context.payload.issue.node_id;
              const repo = context.payload.repository.name.toLowerCase();
              console.log('Processing issue:', { issueId, repo, action: context.payload.action });
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                if (repo === 'fe') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.BACKLOG);
                } else if (repo === 'be') {
                  await moveIssueToColumn(issueId, PROJECT.COLUMNS.SPRINT_BACKLOG);
                }
              } else if (context.payload.action === 'closed') {
                await moveIssueToColumn(issueId, PROJECT.COLUMNS.DONE);
              }
            }

            // PR 처리
            if (context.eventName === 'pull_request') {
              const prId = context.payload.pull_request.node_id;
              console.log('Processing PR:', { prId, action: context.payload.action });
              
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.IN_REVIEW);
              } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                await moveIssueToColumn(prId, PROJECT.COLUMNS.DONE);
              }
            }

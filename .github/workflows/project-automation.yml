name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true
    permissions:
      issues: write
      pull-requests: write
      organization-projects: write
      repository-projects: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_ACTIONS }}
          script: |
            // 프로젝트 정보 조회를 위한 GraphQL 쿼리
            async function getProjectV2() {
              const query = `
                query($organization: String!, $projectNumber: Int!) {
                  organization(login: $organization) {
                    projectV2(number: $projectNumber) {
                      id
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                organization: "YouTubeCreatorsHub",
                projectNumber: 1
              };
              
              const result = await github.graphql(query, variables);
              return result.organization.projectV2;
            }

            // 아이템을 프로젝트에 추가
            async function addItemToProject(projectId, itemId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $itemId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const result = await github.graphql(mutation, {
                projectId: projectId,
                itemId: itemId
              });
              
              return result.addProjectV2ItemById.item.id;
            }

            // 상태 업데이트
            async function updateItemStatus(projectId, itemId, fieldId, statusId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $statusId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $statusId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId,
                itemId,
                fieldId,
                statusId
              });
            }

            try {
              // 프로젝트 정보 가져오기
              const project = await getProjectV2();
              if (!project || !project.id) {
                throw new Error('Project not found');
              }

              const statusField = project.field;
              if (!statusField || !statusField.options) {
                throw new Error('Status field not found');
              }

              // 상태 매핑
              const statusMap = {};
              statusField.options.forEach(option => {
                statusMap[option.name.toUpperCase().replace(/\s+/g, '_')] = option.id;
              });

              let contentId, targetStatus;

              if (context.eventName === 'issues') {
                contentId = context.payload.issue.node_id;
                if (context.payload.action === 'opened') {
                  targetStatus = context.payload.repository.name.toLowerCase() === 'fe' 
                    ? statusMap.BACKLOG 
                    : statusMap.SPRINT_BACKLOG;
                } else if (context.payload.action === 'closed') {
                  targetStatus = statusMap.DONE;
                }
              } else if (context.eventName === 'pull_request') {
                contentId = context.payload.pull_request.node_id;
                if (context.payload.action === 'opened') {
                  targetStatus = statusMap.IN_REVIEW;
                } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                  targetStatus = statusMap.DONE;
                }
              }

              if (contentId && targetStatus) {
                console.log('Adding item to project...');
                const itemId = await addItemToProject(project.id, contentId);
                console.log('Updating item status...');
                await updateItemStatus(project.id, itemId, statusField.id, targetStatus);
                console.log('Successfully updated project item');
              }

            } catch (error) {
              console.error('Error occurred:', error);
              throw error;
            }
